diff --git a/buildtools/wafsamba/wafsamba.py b/buildtools/wafsamba/wafsamba.py
index 4bb19d070e2..26eb6a9d90f 100644
--- a/buildtools/wafsamba/wafsamba.py
+++ b/buildtools/wafsamba/wafsamba.py
@@ -141,7 +141,8 @@ def SAMBA_LIBRARY(bld, libname, source,
                   grouping_library=False,
                   allow_undefined_symbols=False,
                   allow_warnings=False,
-                  enabled=True):
+                  enabled=True,
+                  winexe=False):
     '''define a Samba library'''
 
     if pyembed and bld.env['IS_EXTRA_PYTHON']:
@@ -163,7 +164,7 @@ def SAMBA_LIBRARY(bld, libname, source,
         source = bld.SUBDIR(subdir, source)
 
     # remember empty libraries, so we can strip the dependencies
-    if ((source == '') or (source == [])):
+    if ((source == '') or (source == [])) and not winexe:
         if deps == '' and public_deps == '':
             SET_TARGET_TYPE(bld, libname, 'EMPTY')
             return
@@ -574,7 +575,8 @@ def SAMBA_SUBSYSTEM(bld, modname, source,
                     hide_symbols=False,
                     allow_warnings=False,
                     pyext=False,
-                    pyembed=False):
+                    pyembed=False,
+                    winexe=False):
     '''define a Samba subsystem'''
 
     if not enabled:
@@ -582,7 +584,7 @@ def SAMBA_SUBSYSTEM(bld, modname, source,
         return
 
     # remember empty subsystems, so we can strip the dependencies
-    if ((source == '') or (source == [])):
+    if ((source == '') or (source == [])) and not winexe:
         if deps == '' and public_deps == '':
             SET_TARGET_TYPE(bld, modname, 'EMPTY')
             return
diff --git a/nsswitch/wins.c b/nsswitch/wins.c
index 19d3c5b4fcc..e5987c3070b 100644
--- a/nsswitch/wins.c
+++ b/nsswitch/wins.c
@@ -1,3 +1,10 @@
+#if !defined(NETDB_INTERNAL)
+#  define NETDB_INTERNAL (-1)
+#endif
+#if !defined(NETDB_SUCCESS)
+#  define NETDB_SUCCESS (0)
+#endif
+
 /*
    Unix SMB/CIFS implementation.
    a WINS nsswitch module
diff --git a/source4/torture/local/nss_tests.c b/source4/torture/local/nss_tests.c
index 2cd61225ab8..fd6c92ac4c4 100644
--- a/source4/torture/local/nss_tests.c
+++ b/source4/torture/local/nss_tests.c
@@ -25,6 +25,34 @@
 #include "torture/local/proto.h"
 #include "lib/replace/system/passwd.h"
 
+static int getpwent_r(struct passwd *pwbuf, char *buf, size_t buflen, struct passwd **pwbufp)
+{
+         struct passwd *pw;
+         // if NULL, we had an error, return the appropriate error code
+         if ((pw = getpwent()) == NULL) {
+                  return ERANGE;
+         }
+         // so really we should memcpy mot just the (struct passwd), but everything it points to as well
+         // in practice, we just copy the (struct passwd) because this isn't really thread-safe anyways
+         memcpy(pwbuf, pw, sizeof(*pw));
+         *pwbufp = pwbuf;
+         return 0;
+}
+
+static int getgrent_r(struct group *gbuf, char *buf, size_t buflen, struct group **gbufp)
+{
+         struct group *g;
+         // if NULL, we had an error, return the appropriate error code
+         if ((g = getpwent()) == NULL) {
+                  return ERANGE;
+         }
+         // so really we should memcpy mot just the (struct passwd), but everything it points to as well
+         // in practice, we just copy the (struct passwd) because this isn't really thread-safe anyways
+         memcpy(gbuf, g, sizeof(*g));
+         *gbufp = gbuf;
+         return 0;
+}
+
 static bool copy_passwd(struct torture_context *tctx,
 			const struct passwd *pwd,
 			struct passwd *p)
